{
	"info": {
		"_postman_id": "9e2640f4-1819-4390-9977-f0899f4e91fd",
		"name": "lifap5-backend-2019-2020",
		"description": "The battery test for lifap5-backend-2019-2020",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Root routes (/)",
			"item": [
				{
					"name": "/there-is-nothing-here (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21e8517c-b49a-4f75-b61b-e3d3f4d175fb",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Body is JSON object\", function () {",
									"    pm.expect(jsonData).to.be.a('object');",
									"});",
									" ",
									"pm.test(\"Error is NotFoundError\", function () {",
									"    pm.expect(jsonData.name).to.eql(\"NotFoundError\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e193b8c-d403-46ee-bd88-95e83240948a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server-prot}}://{{server-name}}:{{server-port}}/there-is-nothing-here/",
							"protocol": "{{server-prot}}",
							"host": [
								"{{server-name}}"
							],
							"port": "{{server-port}}",
							"path": [
								"there-is-nothing-here",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/not-implemented (501)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21e8517c-b49a-4f75-b61b-e3d3f4d175fb",
								"exec": [
									"pm.test(\"Status is 501\", function () {",
									"    pm.response.to.have.status(501);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Body is JSON object\", function () {",
									"    pm.expect(jsonData).to.be.a('object');",
									"});",
									" ",
									"pm.test(\"Error is NotImplementedError\", function () {",
									"    pm.expect(jsonData.name).to.eql(\"NotImplementedError\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e193b8c-d403-46ee-bd88-95e83240948a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{server-prot}}://{{server-name}}:{{server-port}}/not-implemented/",
							"protocol": "{{server-prot}}",
							"host": [
								"{{server-name}}"
							],
							"port": "{{server-port}}",
							"path": [
								"not-implemented",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/echo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93f83579-019f-46aa-bd59-dbdd79ea94d5",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Body is JSON object\", function () {",
									"    pm.expect(jsonData).to.be.a('object');",
									"});",
									" ",
									"pm.test(\"Body is correct\", function () {",
									"    pm.expect(jsonData.msg).to.eql(\"message\");",
									"    pm.expect(jsonData.val).to.eql(42);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"msg\" : \"message\",\n\t\"val\" : 42\n}"
						},
						"url": {
							"raw": "{{server-prot}}://{{server-name}}:{{server-port}}/echo",
							"protocol": "{{server-prot}}",
							"host": [
								"{{server-name}}"
							],
							"port": "{{server-port}}",
							"path": [
								"echo"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Content negotiation",
			"item": [
				{
					"name": "/ text/html (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21e8517c-b49a-4f75-b61b-e3d3f4d175fb",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is text/html\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e193b8c-d403-46ee-bd88-95e83240948a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html"
							}
						],
						"url": {
							"raw": "{{server-prot}}://{{server-name}}:{{server-port}}/",
							"protocol": "{{server-prot}}",
							"host": [
								"{{server-name}}"
							],
							"port": "{{server-port}}",
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/ application/json (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21e8517c-b49a-4f75-b61b-e3d3f4d175fb",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Body is JSON object\", function () {",
									"",
									"    pm.expect(jsonData).to.be.a('object');",
									"",
									"});",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.expect(jsonData).to.have.property('appname');",
									"    pm.expect(jsonData).to.have.property('version');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e193b8c-d403-46ee-bd88-95e83240948a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{server-prot}}://{{server-name}}:{{server-port}}/",
							"protocol": "{{server-prot}}",
							"host": [
								"{{server-name}}"
							],
							"port": "{{server-port}}",
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/ invalid/invalid (406)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21e8517c-b49a-4f75-b61b-e3d3f4d175fb",
								"exec": [
									"pm.test(\"Status is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is text/html\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e193b8c-d403-46ee-bd88-95e83240948a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "invalid/invalid"
							}
						],
						"url": {
							"raw": "{{server-prot}}://{{server-name}}:{{server-port}}/",
							"protocol": "{{server-prot}}",
							"host": [
								"{{server-name}}"
							],
							"port": "{{server-port}}",
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "apikey"
	},
	"protocolProfileBehavior": {}
}