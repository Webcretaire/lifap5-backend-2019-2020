openapi: 3.0.2

info:
  title: REST API for the lifap5-backend-2019-2020
  description: The yaml description of the API, lively available at http://lifap5.univ-lyon1.fr/
  version: "0.1.1"
  contact:
    email: romuald.thion@univ-lyon1.fr
    name: Romuald THION
  license:
    name: CC BY-NC-SA 3.0 FR
    url: 'https://creativecommons.org/licenses/by-nc-sa/3.0/fr/'

servers:
  - url: 'http://localhost:3000/'
    description: A local development server
  - url: 'https://lifap5.univ-lyon1.fr/'
    description: The public production server

tags:
  - name: users
    description: User related features
  - name: quizzes
    description: Quizzes related features
  - name: public
    description: Everyone one, without authentication
  - name: authenticated
    description: Authentified user (by x-api-key)

    
paths:

  /:
    get:
      summary: The index page
      description: The index page
      operationId: sendIndex
      tags:
        - public
      responses:
        200:
          description: The index page (with content negotiation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectIndex'
            text/html:
              schema:
                type: string
              example: <html>The index page</html>

  /echo:
    post:
      description: Echo service that returns the json body, like ping with json
      operationId: echoHandler
      tags:
        - public
      requestBody:
        content:
          application/json:
            schema:
              description: The content to echo
              type: object
            example:
              msg: 'test'
              val: 42
      responses:
        200:
          description: Echoed input
          content:
            application/json:
              schema:
                description: The echoed content
                type: object
              example:
                msg: 'test'
                val: 42
        # default:
        #   $ref: "#/components/responses/error"

  /not-implemented:
    get:
      summary: Always returns a NotImplemented error
      description: An error page for test purposes
      operationId: notImplemented
      tags:
        - public
      responses:
        501:
          description: The error (with content negotiation)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotImplemented'
            text/html:
              schema:
                type: string
              example: <html>An error page</html>
              

  /healthcheck:
    get:
      summary: Checks if server is OK
      description: Tests if the PostgreSQL backend is up
      operationId: onHealthCheck
      tags:
        - public
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectHealthCheck'

  /users/:
    get:
      summary: All users
      description: The list of all users with pagination, at most pageLimit items (default 50)
      operationId: getAllUsersHandler
      tags:
        - public
        - users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The number of pages to skip, so (page-1)*pageLimit items are skipped
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: object
                  properties:
                    user_id: 
                      type: string
              example: 
                - user_id: test.user
                - user_id: other.user

  /users/whoami:
    get:
      summary: Given your own infos
      description: Basic route to check authentication with x-api-key
      operationId: whoamiHandler
      tags:
        - authenticated
        - users
      security:
        - XApiKeyAuth: []
      responses:
        '200':
          description: When OK, answers with ID, first name and last name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectUser'
            text/html:
              schema:
                type: string
              example: <html>A welcome page</html>
        '400':
          description: When x-api-key is not a valid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
            text/html:
              schema:
                type: string
              example: <html>An error page</html>
        '401':
          description: when x-api-key is not provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
            text/html:
              schema:
                type: string
              example: <html>An error page</html>
        '403':
          description: when given x-api-key is not in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
            text/html:
              schema:
                type: string
              example: <html>An error page</html>

  /quizzes/:
    get:
      summary: All quizzes
      description: The list of all quizzes (TODO with pagination)
      operationId: getAllQuizzesHandler
      tags:
        - public
        - quizzes
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The number of pages to skip, so (page-1)*pageLimit items are skipped
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: object
                  $ref: '#/components/schemas/ObjectQuiz'
    post:
      summary: Creates a new quiz
      description: Creates a quiz, in the database. quiz_id is auto generated, title and description are mandatory
      operationId: postQuizHandler
      tags:
        - authenticated
        - quizzes
      security:
        - XApiKeyAuth: []
      requestBody:
        description: The quizz to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectQuiz'
            example:
              title: "QCM de test"
              description: "Un QCM supplémentaire"
      responses:
        '201':
          description: Content created, returns the quiz's id 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  quiz_id:
                    type: integer
                    example: 42

  /quizzes/{quiz_id}:
    get:
      summary: Get one quiz
      description: Retreive the given quizz if it exists
      operationId: getOneQuizHandler
      tags:
        - public
        - quizzes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                type: object
                $ref: '#/components/schemas/ObjectQuiz'
      parameters:
        - $ref: '#/components/parameters/quizIdParam'
    put:
      summary: Update an existing quiz
      description: attributes created_at, quiz_id and owner_id cannot be modified, owner_id must be current user
      operationId: putQuizHandler
      tags:
        - authenticated
        - quizzes
      security:
        - XApiKeyAuth: []
      requestBody:
        description: The the fields to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectQuiz'
            example:
              title: "QCM de test - màj"
              description: "Un QCM supplémentaire - màj"
              open: true
      responses:
        '200':
          description: Content updated, returns the whole quizz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectQuiz'
      parameters:
        - $ref: '#/components/parameters/quizIdParam'
    delete:
      summary: Delete an existing quiz
      description: owner_id must be current user
      operationId: delQuizHandler
      tags:
        - authenticated
        - quizzes
      security:
        - XApiKeyAuth: []
      responses:
        '200':
          description: Content deleted
          content:
            application/json:
              schema: 
                type: object
                properties:
                  quiz_id:
                    type: integer
                    example: 42
      parameters:
        - $ref: '#/components/parameters/quizIdParam'

components:
  parameters:
    quizIdParam:
      name: quiz_id
      in: path
      description: ID of a quiz
      required: true
      schema:
        type: integer
      style: simple

# https://swagger.io/docs/specification/authentication/api-keys/
  securitySchemes:
    XApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: X-API-KEY  # name of the header, query parameter or cookie

  responses:
    error:
      description: The error (with content negotiation)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        text/html:
          schema:
            type: string
          example: <html>An error page</html>

  schemas:
    ObjectHealthCheck:
      description: The object returned on healthcheck
      type: object
      required:
        - status
        - info
        - details
      properties:
        status:
          type: string
          enum:
            - ok
            - error
        info:
          type: array
          items:
            type: integer
            example: 1
        details:
          items:
            type: integer
            example: 1

    ObjectIndex:
      type: object
      properties:
        appname:
          type: string
        version:
          type: string
        description:
          type: string
      required:
        - appname
        - version
        - description

    ObjectUser:
      type: object
      required:
        - user_id
        - firstname
        - lastname
      properties:
        user_id:
          type: string
          example: test.user
        firstname:
          type: string
          example: test
        lastname:
          type: string
          example: user

    ObjectQuiz:
      type: object
      required:
        - quiz_id
        - title
        - description
        - owner_id
      properties:
        quiz_id:
          description: value is auto generated by the database
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2020-03-11T09:56:12.372Z"
        title:
          type: string
          example: "QCM LIFAP5 #1"
        description:
          type: string
          example: Des questions de JS et lambda calcul
        owner_id:
          type: string
          example: test.user
        questions_number:
          type: integer
          example: 2
        questions_ids:
          type: array
          items:
            type: integer
          example: [0,1]
        open:
          type: boolean
          example: false
        total_weight:
          type: integer
          example: 4

    ErrorBadRequest:
      type: object
      properties:
        name:
          type: string
          enum: [BadRequest]
        message:
          type: string
      required:
        - name
        - message
    ErrorUnauthorized:
      type: object
      properties:
        name:
          type: string
          enum: [Unauthorized]
        message:
          type: string
      required:
        - name
        - message
    ErrorForbidden:
      type: object
      properties:
        name:
          type: string
          enum: [Forbidden]
        message:
          type: string
      required:
        - name
        - message
    ErrorNotFound:
      type: object
      properties:
        name:
          type: string
          enum: [NotFound]
        message:
          type: string
      required:
        - name
        - message
    ErrorInternalServer:
      type: object
      description: Default error, caught by the default error handler
      properties:
        name:
          type: string
          enum: [InternalServer]
        message:
          type: string
      required:
        - name
        - message
    ErrorNotImplemented:
      type: object
      properties:
        name:
          type: string
          enum: [NotImplemented]
        message:
          type: string
      required:
        - name
        - message