openapi: 3.0.2

info:
  title: REST API for the lifap5-backend-2019-2020
  description: The yaml description of the API, lively available at http://lifap5.univ-lyon1.fr/
  version: '0.1.1'
  contact:
    email: romuald.thion@univ-lyon1.fr
    name: Romuald THION
  license:
    name: CC BY-NC-SA 3.0 FR
    url: 'https://creativecommons.org/licenses/by-nc-sa/3.0/fr/'

servers:
  - url: 'http://localhost:3000/'
    description: A local development server
  - url: 'https://lifap5.univ-lyon1.fr/'
    description: The public production server

tags:
  - name: users
    description: User related features
  - name: quizzes
    description: Quizzes related features
  - name: questions
    description: Questions related features, w.r.t. a gievn quiz
  - name: public
    description: Everyone one, without authentication
  - name: authenticated
    description: Authentified user (by x-api-key)

paths:
  /:
    get:
      summary: The index page
      description: The index page
      operationId: sendIndex
      tags:
        - public
      responses:
        200:
          description: The index page
          content:
            application/json:
              schema:
                type: object
                properties:
                  appname:
                    type: string
                  version:
                    type: string
                  description:
                    type: string
                required:
                  - appname
                  - version
                  - description
            text/html:
              schema:
                type: string
              example: <html>The index page</html>

  /echo:
    post:
      description: Echo service that returns the json body, like ping with json
      operationId: echoHandler
      tags:
        - public
      requestBody:
        content:
          application/json:
            schema:
              description: The content to echo
              type: object
            example:
              msg: 'test'
              val: 42
      responses:
        200:
          description: Echoed input
          content:
            application/json:
              schema:
                description: The echoed content
                type: object
              example:
                msg: 'test'
                val: 42
        # default:
        #   $ref: "#/components/responses/error"

  /not-implemented:
    get:
      summary: Always returns a NotImplemented error
      description: An error page for test purposes
      operationId: notImplemented
      tags:
        - public
      responses:
        501:
          $ref: '#/components/responses/NotImplemented'

  /healthcheck:
    get:
      summary: Checks if server is OK
      description: Tests if the PostgreSQL backend is up
      operationId: onHealthCheck
      tags:
        - public
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectHealthCheck'

  /users/:
    get:
      summary: All users
      description: The list of all users with pagination, at most pageLimit items (default 50)
      operationId: getAllUsersHandler
      tags:
        - public
        - users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The number of pages to skip, so (page-1)*pageLimit items are skipped
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectPaginatedUsers'

  /users/whoami:
    get:
      summary: Given your own infos
      description: Basic route to check authentication with x-api-key
      operationId: whoamiHandler
      tags:
        - authenticated
        - users
      security:
        - XApiKeyAuth: []
      responses:
        200:
          description: When OK, answers with ID, first name and last name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectUser'
            text/html:
              schema:
                type: string
              example: <html>A welcome page</html>
        401:
          $ref: '#/components/responses/Unauthorized'


  /users/{user_id}:
    get:
      summary: Given your detailed own infos
      description: Details include the answered questions 
      operationId: getUserDetails
      tags:
        - authenticated
        - users
      security:
        - XApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/userIdParam'
      responses:
        200:
          description: When OK, answers with ID, first name and last name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectUserDetail'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

  /quizzes/:
    get:
      summary: All quizzes
      description: The list of all quizzes  with pagination, at most pageLimit items (default 50)
      operationId: getAllQuizzesHandler
      tags:
        - public
        - quizzes
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The number of pages to skip, so (page-1)*pageLimit items are skipped
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectPaginatedQuizzes'

    post:
      summary: Creates a new quiz
      description: Creates a quiz, in the database. quiz_id is auto generated, title and description are mandatory
      operationId: postQuizHandler
      tags:
        - authenticated
        - quizzes
      security:
        - XApiKeyAuth: []
      requestBody:
        description: The quizz to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectQuiz'
            example:
              title: 'QCM de test'
              description: 'Un QCM supplémentaire'
      responses:
        201:
          description: Content created, returns the quiz's id
          content:
            application/json:
              schema:
                type: object
                properties:
                  quiz_id:
                    type: integer
                    example: 42
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        409:
          $ref: '#/components/responses/Conflict'


  /quizzes/{quiz_id}:
    parameters:
      - $ref: '#/components/parameters/quizIdParam'
    get:
      summary: Get one quiz
      description: Retreive the given quizz if it exists
      operationId: getOneQuizHandler
      tags:
        - public
        - quizzes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ObjectQuiz'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update an existing quiz
      description: attributes created_at, quiz_id and owner_id cannot be modified, owner_id must be current user
      operationId: putQuizHandler
      tags:
        - authenticated
        - quizzes
      security:
        - XApiKeyAuth: []
      requestBody:
        description: The the fields to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectQuiz'
            example:
              title: 'QCM de test - màj'
              description: 'Un QCM supplémentaire - màj'
              open: true
      responses:
        200:
          description: Content updated, returns the whole quizz
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectQuiz'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
    delete:
      summary: Delete an existing quiz
      description: owner_id must be current user
      operationId: delQuizHandler
      tags:
        - authenticated
        - quizzes
      security:
        - XApiKeyAuth: []
      responses:
        200:
          description: Content deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  quiz_id:
                    type: integer
                    example: 42
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

  /quizzes/{quiz_id}/questions/:
    parameters:
      - $ref: '#/components/parameters/quizIdParam'
    get:
      summary: All questions of a quizz
      description: All questions of a given quizz (if it exists) with extra information
      operationId: getAllQuestionsHandler
      tags:
        - public
        - questions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectQuestion'
        404:
          $ref: '#/components/responses/NotFound'
    post:
      summary: Add a question to a quizz
      operationId: postQuestionHandler
      tags:
        - authenticated
        - questions
      security:
        - XApiKeyAuth: []
      requestBody:
        description: The question to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectQuestionDetail'
            example:
              question_id: 0
              sentence: 'Qui a inventé le lambda calcul ?'
              propositions: 
                - content: 'Alan Turing'
                  proposition_id: 0
                  correct : false
                - content: 'Alonzo Church'
                  proposition_id: 1
                  correct : true
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - quiz_id
                  - question_id
                properties:
                  question_id:
                    type: integer
                  quiz_id:
                    type: integer
              example:
                question_id: 0
                quiz_id: 1
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

  /quizzes/{quiz_id}/questions/{question_id}:
    parameters:
      - $ref: '#/components/parameters/quizIdParam'
      - $ref: '#/components/parameters/questionIdParam'
    get:
      summary: A  question of a quizz
      description: A question of a given quizz (if it exists) with detailled information (its propositions)
      operationId: getOneQuestionHandler
      security:
        - XApiKeyAuth: []
      tags:
        - authenticated
        - questions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectQuestionDetail'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a question of a quizz
      operationId: delQuestionHandler
      tags:
        - authenticated
        - questions
      security:
        - XApiKeyAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  quiz_id:
                    type: integer
                    example : 0
                  question_id:
                    type: integer
                    example : 0
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update a question of a quizz and its propositions
      operationId: putQuestionHandler
      tags:
        - authenticated
        - questions
      security:
        - XApiKeyAuth: []
      requestBody:
        description: The question to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectQuestionDetail'
            example:
              sentence: 'Qui a encore pas inventé le lambda calcul ?'
              propositions: 
                - content: 'encore Alan Turing'
                  proposition_id: 0
                  correct : true
                - content: 'encore Alonzo Church'
                  proposition_id: 1
                  correct : false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  quiz_id:
                    type: integer
                    example : 0
                  question_id:
                    type: integer
                    example : 0
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

components:
  parameters:
    quizIdParam:
      name: quiz_id
      in: path
      description: ID of a quiz
      required: true
      schema:
        type: integer
      style: simple

    questionIdParam:
      name: question_id
      in: path
      description: ID of a question (local to a quiz)
      required: true
      schema:
        type: integer
      style: simple

    userIdParam:
      name: user_id
      in: path
      description: ID of a user
      required: true
      schema:
        type: string
        example: 'test.user'
      style: simple

  # https://swagger.io/docs/specification/authentication/api-keys/
  securitySchemes:
    XApiKeyAuth: # arbitrary name for the security scheme
      type: apiKey
      in: header # can be "header", "query" or "cookie"
      name: X-API-KEY # name of the header, query parameter or cookie

  responses:
    BadRequest:
      description: A 400 error, usually on invalid input (wrong type)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        text/html:
          schema:
            type: string
          example: <html>An error page with status, name and message</html>
    Unauthorized:
      description: A 401 error, for example when no or invalid UUID is provided in X-API-KEY header or when the UUID does not exist in the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        text/html:
          schema:
            type: string
          example: <html>An error page with status, name and message</html>
    Forbidden:
      description: A 403 error, when the user is not the owner of the resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        text/html:
          schema:
            type: string
          example: <html>An error page with status, name and message</html>
    NotFound:
      description: A 404 error, for resource not found (quiz, user, question)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        text/html:
          schema:
            type: string
          example: <html>An error page with status, name and message</html>
    Conflict:
      description: A 409 error, usually due to primary constraint violation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        text/html:
          schema:
            type: string
          example: <html>An error page with status, name and message</html>
    InternalServer:
      description: A 500 error, internal error that is generated by the final default handler if no status is specified
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        text/html:
          schema:
            type: string
          example: <html>An error page with status, name and message</html>
    NotImplemented:
      description: A 501 error, for features to appear
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        text/html:
          schema:
            type: string
          example: <html>An error page with status, name and message</html>

  schemas:
    Error:
      type: object
      properties:
        name:
          type: string
          enum:
            [
              BadRequest,
              Unauthorized,
              Forbidden,
              NotFound,
              InternalServer,
              NotImplemented,
            ]
        message:
          type: string
          example: Invalid content on input
      required:
        - name
        - message

    ObjectHealthCheck:
      description: The object returned on healthcheck
      type: object
      required:
        - status
        - info
        - details
      properties:
        status:
          type: string
          enum:
            - ok
            - error
        info:
          type: array
          items:
            type: integer
            example: 1
        details:
          items:
            type: integer
            example: 1

    ObjectPaginatedList:
      type: object
      required:
        - currentPage
        - pageSize
        - nbResults
        - nbPages
      properties:
        currentPage:
          type: integer
          example: 6
        pageSize:
          type: integer
          example: 50
        nbResults:
          type: integer
          example: 252
        nbPages:
          type: integer
          example: 6

    ObjectPaginatedUsers:
      allOf:
        - $ref: '#/components/schemas/ObjectPaginatedList'
      required:
        - results
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
          example:
            - user_id: test.user
            - user_id: other.user

    ObjectPaginatedQuizzes:
      allOf:
        - $ref: '#/components/schemas/ObjectPaginatedList'
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ObjectQuiz'

    ObjectUser:
      type: object
      required:
        - user_id
        - firstname
        - lastname
      properties:
        user_id:
          type: string
          example: test.user
        firstname:
          type: string
          example: test
        lastname:
          type: string
          example: user

    ObjectUserDetail:
      type: array
      items:
        type: object
        properties:
          quiz_id:
            type: integer
          answers:
            type: array
            items:
              type: object
              properties:
                question_id:
                  type: integer
                proposition_id:
                  type: integer
                answered_at:
                  type: string
                  format: date-time



    ObjectQuiz:
      type: object
      required:
        - quiz_id
        - title
        - description
        - owner_id
      properties:
        quiz_id:
          description: value is auto generated by the database
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2020-03-11T09:56:12.372Z'
        title:
          type: string
          example: 'QCM LIFAP5 #1'
        description:
          type: string
          example: Des questions de JS et lambda calcul
        owner_id:
          type: string
          example: test.user
        questions_number:
          type: integer
          example: 2
        questions_ids:
          type: array
          items:
            type: integer
          example: [0, 1]
        open:
          type: boolean
          example: false

    ObjectQuestion:
      type: object
      required:
        - quiz_id
        - question_id
        - sentence
      properties:
        quiz_id:
          description: value is auto generated by the database
          type: integer
          example: 0
        question_id:
          description: the question'is, the value is under user's control
          type: integer
          example: 0
        sentence:
          type: string
          description: the text of the question
          example: 'Qui a inventé le lambda calcul ?'
        propositions_number:
          type: integer
          description: the number of propositions
          example: 1
        correct_propositions_number:
          type: integer
          description: the number of correct propositions
          example: 1


    ObjectQuestionDetail:
      allOf:
        - $ref: '#/components/schemas/ObjectQuestion'
      required:
        - proposition
      properties:
        propositions:
          type: array
          items:
            $ref: '#/components/schemas/ObjectProposition'

    ObjectProposition:
      type: object
      required:
        - content
        - correct
        - proposition_id
      properties:
        content:
          type: integer
          example: 'Alan Turing'
        correct:
          type: boolean
          example: true
        proposition_id:
          type: integer
          example: 0
